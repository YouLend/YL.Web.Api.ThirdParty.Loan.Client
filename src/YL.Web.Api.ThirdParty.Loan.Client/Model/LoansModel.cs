/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// Model representing one of a selection of loans
    /// </summary>
    [DataContract]
    public partial class LoansModel :  IEquatable<LoansModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoansModel" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the loan&#39;s unique identifier.</param>
        /// <param name="loanNumber">Gets or sets the Loan Number, an ordinal value indicating which of a customer&#39;s loans is here detailed.</param>
        /// <param name="lenderId">Gets or sets the lender&#39;s unique identifier.</param>
        /// <param name="lenderName">Gets or sets the lender&#39;s full name.</param>
        /// <param name="borrowerId">Gets or sets the borrower&#39;s unique identifier.</param>
        /// <param name="borrowerName">Gets or sets the borrower&#39;s full name.</param>
        /// <param name="currentAmount">Gets or sets the Current Amount, the amount yet to be repaid.</param>
        /// <param name="loanType">Gets or sets the Loan Type - \&quot;Initial\&quot;, \&quot;Refinanced\&quot; or \&quot;Renewal\&quot;.</param>
        /// <param name="status">Gets or sets the loan&#39;s Status - \&quot;Deleted\&quot;, \&quot;Funded\&quot;, \&quot;Funded (Pending Settlement)\&quot;, \&quot;Refinanced\&quot;, \&quot;Repaid\&quot;, \&quot;Written Off\&quot;.</param>
        /// <param name="maturityDate">Gets or sets the date on which the loan is due to mature, and by which it should be fully repaid.</param>
        /// <param name="sweep">Gets or sets the Sweep, the decimal out of 100 representing the proportion of transaction income to be used to repay the loan.</param>
        /// <param name="autoRepaymentSweep">Gets or sets a value indicating whether an Auto Repayment Sweep is to be used - this feature automatically directs a chosen proportion, the Sweep, of transaction income towards repaying the loan.</param>
        /// <param name="currencyISOCode">Gets or sets the loan&#39;s Currency ISO Code, e.g. \&quot;GBP\&quot;.</param>
        /// <param name="lendingPartnerIds">Gets or sets the unique identifiers of any lending partners associated with the loan.</param>
        /// <param name="owners">Gets or sets a collection detailing the loan&#39;s Owners YL.Web.Api.ThirdParty.Loan.Models.LoanOwnerModel.</param>
        /// <param name="currentAmountAtRepay">Gets or sets the Current Amount at the time of full loan repayment, if applicable.</param>
        /// <param name="currentAmountAtDelete">Gets or sets the Current Amount at the time of loan deletion, if applicable.</param>
        /// <param name="currentAmountAtWriteOff">Gets or sets the Current Amount at the time of loan write-off, if applicable.</param>
        public LoansModel(Guid id = default(Guid), int loanNumber = default(int), Guid lenderId = default(Guid), string lenderName = default(string), Guid borrowerId = default(Guid), string borrowerName = default(string), double currentAmount = default(double), string loanType = default(string), string status = default(string), DateTime maturityDate = default(DateTime), double sweep = default(double), bool autoRepaymentSweep = default(bool), string currencyISOCode = default(string), List<Guid> lendingPartnerIds = default(List<Guid>), List<LoanOwnerModel> owners = default(List<LoanOwnerModel>), double currentAmountAtRepay = default(double), double currentAmountAtDelete = default(double), double currentAmountAtWriteOff = default(double))
        {
            this.Id = id;
            this.LoanNumber = loanNumber;
            this.LenderId = lenderId;
            this.LenderName = lenderName;
            this.BorrowerId = borrowerId;
            this.BorrowerName = borrowerName;
            this.CurrentAmount = currentAmount;
            this.LoanType = loanType;
            this.Status = status;
            this.MaturityDate = maturityDate;
            this.Sweep = sweep;
            this.AutoRepaymentSweep = autoRepaymentSweep;
            this.CurrencyISOCode = currencyISOCode;
            this.LendingPartnerIds = lendingPartnerIds;
            this.Owners = owners;
            this.CurrentAmountAtRepay = currentAmountAtRepay;
            this.CurrentAmountAtDelete = currentAmountAtDelete;
            this.CurrentAmountAtWriteOff = currentAmountAtWriteOff;
        }
        
        /// <summary>
        /// Gets or sets the loan&#39;s unique identifier
        /// </summary>
        /// <value>Gets or sets the loan&#39;s unique identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the Loan Number, an ordinal value indicating which of a customer&#39;s loans is here detailed
        /// </summary>
        /// <value>Gets or sets the Loan Number, an ordinal value indicating which of a customer&#39;s loans is here detailed</value>
        [DataMember(Name="loanNumber", EmitDefaultValue=false)]
        public int LoanNumber { get; set; }

        /// <summary>
        /// Gets or sets the lender&#39;s unique identifier
        /// </summary>
        /// <value>Gets or sets the lender&#39;s unique identifier</value>
        [DataMember(Name="lenderId", EmitDefaultValue=false)]
        public Guid LenderId { get; set; }

        /// <summary>
        /// Gets or sets the lender&#39;s full name
        /// </summary>
        /// <value>Gets or sets the lender&#39;s full name</value>
        [DataMember(Name="lenderName", EmitDefaultValue=false)]
        public string LenderName { get; set; }

        /// <summary>
        /// Gets or sets the borrower&#39;s unique identifier
        /// </summary>
        /// <value>Gets or sets the borrower&#39;s unique identifier</value>
        [DataMember(Name="borrowerId", EmitDefaultValue=false)]
        public Guid BorrowerId { get; set; }

        /// <summary>
        /// Gets or sets the borrower&#39;s full name
        /// </summary>
        /// <value>Gets or sets the borrower&#39;s full name</value>
        [DataMember(Name="borrowerName", EmitDefaultValue=false)]
        public string BorrowerName { get; set; }

        /// <summary>
        /// Gets or sets the Current Amount, the amount yet to be repaid
        /// </summary>
        /// <value>Gets or sets the Current Amount, the amount yet to be repaid</value>
        [DataMember(Name="currentAmount", EmitDefaultValue=false)]
        public double CurrentAmount { get; set; }

        /// <summary>
        /// Gets or sets the Loan Type - \&quot;Initial\&quot;, \&quot;Refinanced\&quot; or \&quot;Renewal\&quot;
        /// </summary>
        /// <value>Gets or sets the Loan Type - \&quot;Initial\&quot;, \&quot;Refinanced\&quot; or \&quot;Renewal\&quot;</value>
        [DataMember(Name="loanType", EmitDefaultValue=false)]
        public string LoanType { get; set; }

        /// <summary>
        /// Gets or sets the loan&#39;s Status - \&quot;Deleted\&quot;, \&quot;Funded\&quot;, \&quot;Funded (Pending Settlement)\&quot;, \&quot;Refinanced\&quot;, \&quot;Repaid\&quot;, \&quot;Written Off\&quot;
        /// </summary>
        /// <value>Gets or sets the loan&#39;s Status - \&quot;Deleted\&quot;, \&quot;Funded\&quot;, \&quot;Funded (Pending Settlement)\&quot;, \&quot;Refinanced\&quot;, \&quot;Repaid\&quot;, \&quot;Written Off\&quot;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the date on which the loan is due to mature, and by which it should be fully repaid
        /// </summary>
        /// <value>Gets or sets the date on which the loan is due to mature, and by which it should be fully repaid</value>
        [DataMember(Name="maturityDate", EmitDefaultValue=false)]
        public DateTime MaturityDate { get; set; }

        /// <summary>
        /// Gets or sets the Sweep, the decimal out of 100 representing the proportion of transaction income to be used to repay the loan
        /// </summary>
        /// <value>Gets or sets the Sweep, the decimal out of 100 representing the proportion of transaction income to be used to repay the loan</value>
        [DataMember(Name="sweep", EmitDefaultValue=false)]
        public double Sweep { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether an Auto Repayment Sweep is to be used - this feature automatically directs a chosen proportion, the Sweep, of transaction income towards repaying the loan
        /// </summary>
        /// <value>Gets or sets a value indicating whether an Auto Repayment Sweep is to be used - this feature automatically directs a chosen proportion, the Sweep, of transaction income towards repaying the loan</value>
        [DataMember(Name="autoRepaymentSweep", EmitDefaultValue=false)]
        public bool AutoRepaymentSweep { get; set; }

        /// <summary>
        /// Gets or sets the loan&#39;s Currency ISO Code, e.g. \&quot;GBP\&quot;
        /// </summary>
        /// <value>Gets or sets the loan&#39;s Currency ISO Code, e.g. \&quot;GBP\&quot;</value>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or sets the unique identifiers of any lending partners associated with the loan
        /// </summary>
        /// <value>Gets or sets the unique identifiers of any lending partners associated with the loan</value>
        [DataMember(Name="lendingPartnerIds", EmitDefaultValue=false)]
        public List<Guid> LendingPartnerIds { get; set; }

        /// <summary>
        /// Gets or sets a collection detailing the loan&#39;s Owners YL.Web.Api.ThirdParty.Loan.Models.LoanOwnerModel
        /// </summary>
        /// <value>Gets or sets a collection detailing the loan&#39;s Owners YL.Web.Api.ThirdParty.Loan.Models.LoanOwnerModel</value>
        [DataMember(Name="owners", EmitDefaultValue=false)]
        public List<LoanOwnerModel> Owners { get; set; }

        /// <summary>
        /// Gets or sets the Current Amount at the time of full loan repayment, if applicable
        /// </summary>
        /// <value>Gets or sets the Current Amount at the time of full loan repayment, if applicable</value>
        [DataMember(Name="currentAmountAtRepay", EmitDefaultValue=false)]
        public double CurrentAmountAtRepay { get; set; }

        /// <summary>
        /// Gets or sets the Current Amount at the time of loan deletion, if applicable
        /// </summary>
        /// <value>Gets or sets the Current Amount at the time of loan deletion, if applicable</value>
        [DataMember(Name="currentAmountAtDelete", EmitDefaultValue=false)]
        public double CurrentAmountAtDelete { get; set; }

        /// <summary>
        /// Gets or sets the Current Amount at the time of loan write-off, if applicable
        /// </summary>
        /// <value>Gets or sets the Current Amount at the time of loan write-off, if applicable</value>
        [DataMember(Name="currentAmountAtWriteOff", EmitDefaultValue=false)]
        public double CurrentAmountAtWriteOff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoansModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoanNumber: ").Append(LoanNumber).Append("\n");
            sb.Append("  LenderId: ").Append(LenderId).Append("\n");
            sb.Append("  LenderName: ").Append(LenderName).Append("\n");
            sb.Append("  BorrowerId: ").Append(BorrowerId).Append("\n");
            sb.Append("  BorrowerName: ").Append(BorrowerName).Append("\n");
            sb.Append("  CurrentAmount: ").Append(CurrentAmount).Append("\n");
            sb.Append("  LoanType: ").Append(LoanType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Sweep: ").Append(Sweep).Append("\n");
            sb.Append("  AutoRepaymentSweep: ").Append(AutoRepaymentSweep).Append("\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("  LendingPartnerIds: ").Append(LendingPartnerIds).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("  CurrentAmountAtRepay: ").Append(CurrentAmountAtRepay).Append("\n");
            sb.Append("  CurrentAmountAtDelete: ").Append(CurrentAmountAtDelete).Append("\n");
            sb.Append("  CurrentAmountAtWriteOff: ").Append(CurrentAmountAtWriteOff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoansModel);
        }

        /// <summary>
        /// Returns true if LoansModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoansModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoansModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoanNumber == input.LoanNumber ||
                    this.LoanNumber.Equals(input.LoanNumber)
                ) && 
                (
                    this.LenderId == input.LenderId ||
                    (this.LenderId != null &&
                    this.LenderId.Equals(input.LenderId))
                ) && 
                (
                    this.LenderName == input.LenderName ||
                    (this.LenderName != null &&
                    this.LenderName.Equals(input.LenderName))
                ) && 
                (
                    this.BorrowerId == input.BorrowerId ||
                    (this.BorrowerId != null &&
                    this.BorrowerId.Equals(input.BorrowerId))
                ) && 
                (
                    this.BorrowerName == input.BorrowerName ||
                    (this.BorrowerName != null &&
                    this.BorrowerName.Equals(input.BorrowerName))
                ) && 
                (
                    this.CurrentAmount == input.CurrentAmount ||
                    this.CurrentAmount.Equals(input.CurrentAmount)
                ) && 
                (
                    this.LoanType == input.LoanType ||
                    (this.LoanType != null &&
                    this.LoanType.Equals(input.LoanType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.Sweep == input.Sweep ||
                    this.Sweep.Equals(input.Sweep)
                ) && 
                (
                    this.AutoRepaymentSweep == input.AutoRepaymentSweep ||
                    this.AutoRepaymentSweep.Equals(input.AutoRepaymentSweep)
                ) && 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                ) && 
                (
                    this.LendingPartnerIds == input.LendingPartnerIds ||
                    this.LendingPartnerIds != null &&
                    input.LendingPartnerIds != null &&
                    this.LendingPartnerIds.SequenceEqual(input.LendingPartnerIds)
                ) && 
                (
                    this.Owners == input.Owners ||
                    this.Owners != null &&
                    input.Owners != null &&
                    this.Owners.SequenceEqual(input.Owners)
                ) && 
                (
                    this.CurrentAmountAtRepay == input.CurrentAmountAtRepay ||
                    this.CurrentAmountAtRepay.Equals(input.CurrentAmountAtRepay)
                ) && 
                (
                    this.CurrentAmountAtDelete == input.CurrentAmountAtDelete ||
                    this.CurrentAmountAtDelete.Equals(input.CurrentAmountAtDelete)
                ) && 
                (
                    this.CurrentAmountAtWriteOff == input.CurrentAmountAtWriteOff ||
                    this.CurrentAmountAtWriteOff.Equals(input.CurrentAmountAtWriteOff)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.LoanNumber.GetHashCode();
                if (this.LenderId != null)
                    hashCode = hashCode * 59 + this.LenderId.GetHashCode();
                if (this.LenderName != null)
                    hashCode = hashCode * 59 + this.LenderName.GetHashCode();
                if (this.BorrowerId != null)
                    hashCode = hashCode * 59 + this.BorrowerId.GetHashCode();
                if (this.BorrowerName != null)
                    hashCode = hashCode * 59 + this.BorrowerName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentAmount.GetHashCode();
                if (this.LoanType != null)
                    hashCode = hashCode * 59 + this.LoanType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                hashCode = hashCode * 59 + this.Sweep.GetHashCode();
                hashCode = hashCode * 59 + this.AutoRepaymentSweep.GetHashCode();
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                if (this.LendingPartnerIds != null)
                    hashCode = hashCode * 59 + this.LendingPartnerIds.GetHashCode();
                if (this.Owners != null)
                    hashCode = hashCode * 59 + this.Owners.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentAmountAtRepay.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentAmountAtDelete.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentAmountAtWriteOff.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
