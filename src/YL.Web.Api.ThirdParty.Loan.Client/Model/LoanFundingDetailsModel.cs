/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// A model detailing a given loan&#39;s funding
    /// </summary>
    [DataContract]
    public partial class LoanFundingDetailsModel :  IEquatable<LoanFundingDetailsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanFundingDetailsModel" /> class.
        /// </summary>
        /// <param name="fundingAmount">Gets or sets the Funding Amount, equal to the Amount Funded when the loan is fully funded.</param>
        /// <param name="fundingDate">Gets or sets the date on which the loan became fully funded.</param>
        /// <param name="fundingPayments">Gets or sets a collection of Funding Payments.</param>
        /// <param name="amountFunded">Gets or sets the Amount Funded.</param>
        public LoanFundingDetailsModel(double fundingAmount = default(double), DateTime fundingDate = default(DateTime), List<LoanFundingPaymentModel> fundingPayments = default(List<LoanFundingPaymentModel>), double amountFunded = default(double))
        {
            this.FundingAmount = fundingAmount;
            this.FundingDate = fundingDate;
            this.FundingPayments = fundingPayments;
            this.AmountFunded = amountFunded;
        }
        
        /// <summary>
        /// Gets or sets the Funding Amount, equal to the Amount Funded when the loan is fully funded
        /// </summary>
        /// <value>Gets or sets the Funding Amount, equal to the Amount Funded when the loan is fully funded</value>
        [DataMember(Name="fundingAmount", EmitDefaultValue=false)]
        public double FundingAmount { get; set; }

        /// <summary>
        /// Gets or sets the date on which the loan became fully funded
        /// </summary>
        /// <value>Gets or sets the date on which the loan became fully funded</value>
        [DataMember(Name="fundingDate", EmitDefaultValue=false)]
        public DateTime FundingDate { get; set; }

        /// <summary>
        /// Gets or sets a collection of Funding Payments
        /// </summary>
        /// <value>Gets or sets a collection of Funding Payments</value>
        [DataMember(Name="fundingPayments", EmitDefaultValue=false)]
        public List<LoanFundingPaymentModel> FundingPayments { get; set; }

        /// <summary>
        /// Gets or sets the Amount Funded
        /// </summary>
        /// <value>Gets or sets the Amount Funded</value>
        [DataMember(Name="amountFunded", EmitDefaultValue=false)]
        public double AmountFunded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanFundingDetailsModel {\n");
            sb.Append("  FundingAmount: ").Append(FundingAmount).Append("\n");
            sb.Append("  FundingDate: ").Append(FundingDate).Append("\n");
            sb.Append("  FundingPayments: ").Append(FundingPayments).Append("\n");
            sb.Append("  AmountFunded: ").Append(AmountFunded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanFundingDetailsModel);
        }

        /// <summary>
        /// Returns true if LoanFundingDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanFundingDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanFundingDetailsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FundingAmount == input.FundingAmount ||
                    this.FundingAmount.Equals(input.FundingAmount)
                ) && 
                (
                    this.FundingDate == input.FundingDate ||
                    (this.FundingDate != null &&
                    this.FundingDate.Equals(input.FundingDate))
                ) && 
                (
                    this.FundingPayments == input.FundingPayments ||
                    this.FundingPayments != null &&
                    input.FundingPayments != null &&
                    this.FundingPayments.SequenceEqual(input.FundingPayments)
                ) && 
                (
                    this.AmountFunded == input.AmountFunded ||
                    this.AmountFunded.Equals(input.AmountFunded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.FundingAmount.GetHashCode();
                if (this.FundingDate != null)
                    hashCode = hashCode * 59 + this.FundingDate.GetHashCode();
                if (this.FundingPayments != null)
                    hashCode = hashCode * 59 + this.FundingPayments.GetHashCode();
                hashCode = hashCode * 59 + this.AmountFunded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
