/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// A model detailing an instance of Early Renewal
    /// </summary>
    [DataContract]
    public partial class EarlyRenewalDetailsModel :  IEquatable<EarlyRenewalDetailsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EarlyRenewalDetailsModel" /> class.
        /// </summary>
        /// <param name="oldLoanId">Gets or sets the Loan ID of the loan which was renewed.</param>
        /// <param name="oldLoanNumber">Gets or sets the Loan Number of the loan which was renewed.</param>
        /// <param name="isOldLoanRepaid">Gets or sets a value indicating whether the loan which was renewed has been fully repaid.</param>
        /// <param name="newLoanId">Gets or sets the Loan ID of the Early Remewal loan created.</param>
        /// <param name="newLoanNumber">Gets or sets the Loan Number of the Early Remewal loan created.</param>
        public EarlyRenewalDetailsModel(Guid oldLoanId = default(Guid), int oldLoanNumber = default(int), bool isOldLoanRepaid = default(bool), Guid newLoanId = default(Guid), int newLoanNumber = default(int))
        {
            this.OldLoanId = oldLoanId;
            this.OldLoanNumber = oldLoanNumber;
            this.IsOldLoanRepaid = isOldLoanRepaid;
            this.NewLoanId = newLoanId;
            this.NewLoanNumber = newLoanNumber;
        }
        
        /// <summary>
        /// Gets or sets the Loan ID of the loan which was renewed
        /// </summary>
        /// <value>Gets or sets the Loan ID of the loan which was renewed</value>
        [DataMember(Name="oldLoanId", EmitDefaultValue=false)]
        public Guid OldLoanId { get; set; }

        /// <summary>
        /// Gets or sets the Loan Number of the loan which was renewed
        /// </summary>
        /// <value>Gets or sets the Loan Number of the loan which was renewed</value>
        [DataMember(Name="oldLoanNumber", EmitDefaultValue=false)]
        public int OldLoanNumber { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the loan which was renewed has been fully repaid
        /// </summary>
        /// <value>Gets or sets a value indicating whether the loan which was renewed has been fully repaid</value>
        [DataMember(Name="isOldLoanRepaid", EmitDefaultValue=false)]
        public bool IsOldLoanRepaid { get; set; }

        /// <summary>
        /// Gets or sets the Loan ID of the Early Remewal loan created
        /// </summary>
        /// <value>Gets or sets the Loan ID of the Early Remewal loan created</value>
        [DataMember(Name="newLoanId", EmitDefaultValue=false)]
        public Guid NewLoanId { get; set; }

        /// <summary>
        /// Gets or sets the Loan Number of the Early Remewal loan created
        /// </summary>
        /// <value>Gets or sets the Loan Number of the Early Remewal loan created</value>
        [DataMember(Name="newLoanNumber", EmitDefaultValue=false)]
        public int NewLoanNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EarlyRenewalDetailsModel {\n");
            sb.Append("  OldLoanId: ").Append(OldLoanId).Append("\n");
            sb.Append("  OldLoanNumber: ").Append(OldLoanNumber).Append("\n");
            sb.Append("  IsOldLoanRepaid: ").Append(IsOldLoanRepaid).Append("\n");
            sb.Append("  NewLoanId: ").Append(NewLoanId).Append("\n");
            sb.Append("  NewLoanNumber: ").Append(NewLoanNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EarlyRenewalDetailsModel);
        }

        /// <summary>
        /// Returns true if EarlyRenewalDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of EarlyRenewalDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EarlyRenewalDetailsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OldLoanId == input.OldLoanId ||
                    (this.OldLoanId != null &&
                    this.OldLoanId.Equals(input.OldLoanId))
                ) && 
                (
                    this.OldLoanNumber == input.OldLoanNumber ||
                    this.OldLoanNumber.Equals(input.OldLoanNumber)
                ) && 
                (
                    this.IsOldLoanRepaid == input.IsOldLoanRepaid ||
                    this.IsOldLoanRepaid.Equals(input.IsOldLoanRepaid)
                ) && 
                (
                    this.NewLoanId == input.NewLoanId ||
                    (this.NewLoanId != null &&
                    this.NewLoanId.Equals(input.NewLoanId))
                ) && 
                (
                    this.NewLoanNumber == input.NewLoanNumber ||
                    this.NewLoanNumber.Equals(input.NewLoanNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldLoanId != null)
                    hashCode = hashCode * 59 + this.OldLoanId.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanNumber.GetHashCode();
                hashCode = hashCode * 59 + this.IsOldLoanRepaid.GetHashCode();
                if (this.NewLoanId != null)
                    hashCode = hashCode * 59 + this.NewLoanId.GetHashCode();
                hashCode = hashCode * 59 + this.NewLoanNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
