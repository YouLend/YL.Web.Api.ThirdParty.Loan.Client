/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// A model characterising a given funding payment
    /// </summary>
    [DataContract]
    public partial class LoanFundingPaymentModel :  IEquatable<LoanFundingPaymentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanFundingPaymentModel" /> class.
        /// </summary>
        /// <param name="paymentDate">Gets or sets the Payment Date.</param>
        /// <param name="paymentAmount">Gets or sets the Payment Amount.</param>
        public LoanFundingPaymentModel(DateTime paymentDate = default(DateTime), double paymentAmount = default(double))
        {
            this.PaymentDate = paymentDate;
            this.PaymentAmount = paymentAmount;
        }
        
        /// <summary>
        /// Gets or sets the Payment Date
        /// </summary>
        /// <value>Gets or sets the Payment Date</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// Gets or sets the Payment Amount
        /// </summary>
        /// <value>Gets or sets the Payment Amount</value>
        [DataMember(Name="paymentAmount", EmitDefaultValue=false)]
        public double PaymentAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanFundingPaymentModel {\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanFundingPaymentModel);
        }

        /// <summary>
        /// Returns true if LoanFundingPaymentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanFundingPaymentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanFundingPaymentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    this.PaymentAmount.Equals(input.PaymentAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
