/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// A model representing an instance of loan default, the failure to repay debt associated with a given loan
    /// </summary>
    [DataContract]
    public partial class DefaultDetailsModel :  IEquatable<DefaultDetailsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultDetailsModel" /> class.
        /// </summary>
        /// <param name="reason">Gets or sets the reason, put concisely, for the default.</param>
        /// <param name="reasonDetails">Gets or sets a more detailed account of the reason for default.</param>
        /// <param name="dateDefaulted">Gets or sets the date on which default occurred.</param>
        /// <param name="currentAmountAtTimeOfDefault">Gets or sets the loan&#39;s Current Amount at the time of default.</param>
        public DefaultDetailsModel(string reason = default(string), string reasonDetails = default(string), DateTime dateDefaulted = default(DateTime), double currentAmountAtTimeOfDefault = default(double))
        {
            this.Reason = reason;
            this.ReasonDetails = reasonDetails;
            this.DateDefaulted = dateDefaulted;
            this.CurrentAmountAtTimeOfDefault = currentAmountAtTimeOfDefault;
        }
        
        /// <summary>
        /// Gets or sets the reason, put concisely, for the default
        /// </summary>
        /// <value>Gets or sets the reason, put concisely, for the default</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or sets a more detailed account of the reason for default
        /// </summary>
        /// <value>Gets or sets a more detailed account of the reason for default</value>
        [DataMember(Name="reasonDetails", EmitDefaultValue=false)]
        public string ReasonDetails { get; set; }

        /// <summary>
        /// Gets or sets the date on which default occurred
        /// </summary>
        /// <value>Gets or sets the date on which default occurred</value>
        [DataMember(Name="dateDefaulted", EmitDefaultValue=false)]
        public DateTime DateDefaulted { get; set; }

        /// <summary>
        /// Gets or sets the loan&#39;s Current Amount at the time of default
        /// </summary>
        /// <value>Gets or sets the loan&#39;s Current Amount at the time of default</value>
        [DataMember(Name="currentAmountAtTimeOfDefault", EmitDefaultValue=false)]
        public double CurrentAmountAtTimeOfDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultDetailsModel {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReasonDetails: ").Append(ReasonDetails).Append("\n");
            sb.Append("  DateDefaulted: ").Append(DateDefaulted).Append("\n");
            sb.Append("  CurrentAmountAtTimeOfDefault: ").Append(CurrentAmountAtTimeOfDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DefaultDetailsModel);
        }

        /// <summary>
        /// Returns true if DefaultDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DefaultDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultDetailsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.ReasonDetails == input.ReasonDetails ||
                    (this.ReasonDetails != null &&
                    this.ReasonDetails.Equals(input.ReasonDetails))
                ) && 
                (
                    this.DateDefaulted == input.DateDefaulted ||
                    (this.DateDefaulted != null &&
                    this.DateDefaulted.Equals(input.DateDefaulted))
                ) && 
                (
                    this.CurrentAmountAtTimeOfDefault == input.CurrentAmountAtTimeOfDefault ||
                    this.CurrentAmountAtTimeOfDefault.Equals(input.CurrentAmountAtTimeOfDefault)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.ReasonDetails != null)
                    hashCode = hashCode * 59 + this.ReasonDetails.GetHashCode();
                if (this.DateDefaulted != null)
                    hashCode = hashCode * 59 + this.DateDefaulted.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentAmountAtTimeOfDefault.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
