/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// A model characterising the refinancing of a given loan, if applicable; here the \&quot;old loan\&quot; is that which was refinanced with the \&quot;new\&quot; or \&quot;refinancing\&quot; loan, while the \&quot;consolidated loan\&quot; represents the combination of these two loans
    /// </summary>
    [DataContract]
    public partial class RefinancingLoanDetailsModel :  IEquatable<RefinancingLoanDetailsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefinancingLoanDetailsModel" /> class.
        /// </summary>
        /// <param name="loanId">Gets or sets the refinancing loan&#39;s unique identifier.</param>
        /// <param name="loanNumber">Gets or sets the refinancing loan&#39;s Loan Number, an ordinal value indicating which of a customer&#39;s loans is here detailed.</param>
        /// <param name="oldLoanOriginalAmount">Gets or sets the old loan&#39;s Original Amount, the total amount due to be repaid on maturity.</param>
        /// <param name="oldLoanFundedAmount">Gets or sets the old loan&#39;s Funded Amount, the total amount loaned to the customer.</param>
        /// <param name="oldLoanDiscount">Gets or sets the old loan&#39;s discount rate.</param>
        /// <param name="oldLoanDiscountAmount">Gets or sets the discount fee associated with the old loan.</param>
        /// <param name="oldLoanRepaymentAmount">Gets or sets the amount repaid on the old loan.</param>
        /// <param name="oldLoanRepaymentFundedAmount">Gets or sets the value of OldLoanRepaymentAmount accounted for by the Funded Amount.</param>
        /// <param name="oldLoanRepaymentDiscountAmount">Gets or sets the value of OldLoanRepaymentAmount accounted for by the Discount Amount.</param>
        /// <param name="oldLoanUnpaidAmount">Gets or sets the amount yet to be repaid on the old loan.</param>
        /// <param name="oldLoanUnpaidFundedAmount">Gets or sets the value of OldLoanUnpaidAmount accounted for by the Funded Amount.</param>
        /// <param name="oldLoanUnpaidDiscountAmount">Gets or sets the value of OldLoanUnpaidAmount accounted for by the Discount Amount.</param>
        /// <param name="newLoanIncreaseAmount">Gets or sets the value by which the new loan will increase the Original Amount to be repaid by the customer.</param>
        /// <param name="newLoanIncreaseFundedAmount">Gets or sets the value of NewLoanIncreaseAmount accounted for by the Funded Amount.</param>
        /// <param name="newLoanIncreaseDiscount">Gets or sets the new loan&#39;s discount rate.</param>
        /// <param name="newLoanIncreaseDiscountAmount">Gets or sets the value of NewLoanIncreaseAmount accounted for by the Discount Amount.</param>
        /// <param name="consolidatedLoanOriginalAmount">Gets or sets the consolidated loan&#39;s Original Amount, the total amount due to be repaid on maturity.</param>
        /// <param name="consolidatedLoanFundedAmount">Gets or sets the consolidated loan&#39;s Funded Amount, the total amount loaned to the customer.</param>
        /// <param name="consolidatedLoanDiscount">Gets or sets the consolidated loan&#39;s discount rate.</param>
        /// <param name="consolidatedLoanDiscountAmount">Gets or sets the discount fee associated with the consolidated loan.</param>
        public RefinancingLoanDetailsModel(Guid loanId = default(Guid), int loanNumber = default(int), double oldLoanOriginalAmount = default(double), double oldLoanFundedAmount = default(double), double oldLoanDiscount = default(double), double oldLoanDiscountAmount = default(double), double oldLoanRepaymentAmount = default(double), double oldLoanRepaymentFundedAmount = default(double), double oldLoanRepaymentDiscountAmount = default(double), double oldLoanUnpaidAmount = default(double), double oldLoanUnpaidFundedAmount = default(double), double oldLoanUnpaidDiscountAmount = default(double), double newLoanIncreaseAmount = default(double), double newLoanIncreaseFundedAmount = default(double), double newLoanIncreaseDiscount = default(double), double newLoanIncreaseDiscountAmount = default(double), double consolidatedLoanOriginalAmount = default(double), double consolidatedLoanFundedAmount = default(double), double consolidatedLoanDiscount = default(double), double consolidatedLoanDiscountAmount = default(double))
        {
            this.LoanId = loanId;
            this.LoanNumber = loanNumber;
            this.OldLoanOriginalAmount = oldLoanOriginalAmount;
            this.OldLoanFundedAmount = oldLoanFundedAmount;
            this.OldLoanDiscount = oldLoanDiscount;
            this.OldLoanDiscountAmount = oldLoanDiscountAmount;
            this.OldLoanRepaymentAmount = oldLoanRepaymentAmount;
            this.OldLoanRepaymentFundedAmount = oldLoanRepaymentFundedAmount;
            this.OldLoanRepaymentDiscountAmount = oldLoanRepaymentDiscountAmount;
            this.OldLoanUnpaidAmount = oldLoanUnpaidAmount;
            this.OldLoanUnpaidFundedAmount = oldLoanUnpaidFundedAmount;
            this.OldLoanUnpaidDiscountAmount = oldLoanUnpaidDiscountAmount;
            this.NewLoanIncreaseAmount = newLoanIncreaseAmount;
            this.NewLoanIncreaseFundedAmount = newLoanIncreaseFundedAmount;
            this.NewLoanIncreaseDiscount = newLoanIncreaseDiscount;
            this.NewLoanIncreaseDiscountAmount = newLoanIncreaseDiscountAmount;
            this.ConsolidatedLoanOriginalAmount = consolidatedLoanOriginalAmount;
            this.ConsolidatedLoanFundedAmount = consolidatedLoanFundedAmount;
            this.ConsolidatedLoanDiscount = consolidatedLoanDiscount;
            this.ConsolidatedLoanDiscountAmount = consolidatedLoanDiscountAmount;
        }
        
        /// <summary>
        /// Gets or sets the refinancing loan&#39;s unique identifier
        /// </summary>
        /// <value>Gets or sets the refinancing loan&#39;s unique identifier</value>
        [DataMember(Name="loanId", EmitDefaultValue=false)]
        public Guid LoanId { get; set; }

        /// <summary>
        /// Gets or sets the refinancing loan&#39;s Loan Number, an ordinal value indicating which of a customer&#39;s loans is here detailed
        /// </summary>
        /// <value>Gets or sets the refinancing loan&#39;s Loan Number, an ordinal value indicating which of a customer&#39;s loans is here detailed</value>
        [DataMember(Name="loanNumber", EmitDefaultValue=false)]
        public int LoanNumber { get; set; }

        /// <summary>
        /// Gets or sets the old loan&#39;s Original Amount, the total amount due to be repaid on maturity
        /// </summary>
        /// <value>Gets or sets the old loan&#39;s Original Amount, the total amount due to be repaid on maturity</value>
        [DataMember(Name="oldLoanOriginalAmount", EmitDefaultValue=false)]
        public double OldLoanOriginalAmount { get; set; }

        /// <summary>
        /// Gets or sets the old loan&#39;s Funded Amount, the total amount loaned to the customer
        /// </summary>
        /// <value>Gets or sets the old loan&#39;s Funded Amount, the total amount loaned to the customer</value>
        [DataMember(Name="oldLoanFundedAmount", EmitDefaultValue=false)]
        public double OldLoanFundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the old loan&#39;s discount rate
        /// </summary>
        /// <value>Gets or sets the old loan&#39;s discount rate</value>
        [DataMember(Name="oldLoanDiscount", EmitDefaultValue=false)]
        public double OldLoanDiscount { get; set; }

        /// <summary>
        /// Gets or sets the discount fee associated with the old loan
        /// </summary>
        /// <value>Gets or sets the discount fee associated with the old loan</value>
        [DataMember(Name="oldLoanDiscountAmount", EmitDefaultValue=false)]
        public double OldLoanDiscountAmount { get; set; }

        /// <summary>
        /// Gets or sets the amount repaid on the old loan
        /// </summary>
        /// <value>Gets or sets the amount repaid on the old loan</value>
        [DataMember(Name="oldLoanRepaymentAmount", EmitDefaultValue=false)]
        public double OldLoanRepaymentAmount { get; set; }

        /// <summary>
        /// Gets or sets the value of OldLoanRepaymentAmount accounted for by the Funded Amount
        /// </summary>
        /// <value>Gets or sets the value of OldLoanRepaymentAmount accounted for by the Funded Amount</value>
        [DataMember(Name="oldLoanRepaymentFundedAmount", EmitDefaultValue=false)]
        public double OldLoanRepaymentFundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the value of OldLoanRepaymentAmount accounted for by the Discount Amount
        /// </summary>
        /// <value>Gets or sets the value of OldLoanRepaymentAmount accounted for by the Discount Amount</value>
        [DataMember(Name="oldLoanRepaymentDiscountAmount", EmitDefaultValue=false)]
        public double OldLoanRepaymentDiscountAmount { get; set; }

        /// <summary>
        /// Gets or sets the amount yet to be repaid on the old loan
        /// </summary>
        /// <value>Gets or sets the amount yet to be repaid on the old loan</value>
        [DataMember(Name="oldLoanUnpaidAmount", EmitDefaultValue=false)]
        public double OldLoanUnpaidAmount { get; set; }

        /// <summary>
        /// Gets or sets the value of OldLoanUnpaidAmount accounted for by the Funded Amount
        /// </summary>
        /// <value>Gets or sets the value of OldLoanUnpaidAmount accounted for by the Funded Amount</value>
        [DataMember(Name="oldLoanUnpaidFundedAmount", EmitDefaultValue=false)]
        public double OldLoanUnpaidFundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the value of OldLoanUnpaidAmount accounted for by the Discount Amount
        /// </summary>
        /// <value>Gets or sets the value of OldLoanUnpaidAmount accounted for by the Discount Amount</value>
        [DataMember(Name="oldLoanUnpaidDiscountAmount", EmitDefaultValue=false)]
        public double OldLoanUnpaidDiscountAmount { get; set; }

        /// <summary>
        /// Gets or sets the value by which the new loan will increase the Original Amount to be repaid by the customer
        /// </summary>
        /// <value>Gets or sets the value by which the new loan will increase the Original Amount to be repaid by the customer</value>
        [DataMember(Name="newLoanIncreaseAmount", EmitDefaultValue=false)]
        public double NewLoanIncreaseAmount { get; set; }

        /// <summary>
        /// Gets or sets the value of NewLoanIncreaseAmount accounted for by the Funded Amount
        /// </summary>
        /// <value>Gets or sets the value of NewLoanIncreaseAmount accounted for by the Funded Amount</value>
        [DataMember(Name="newLoanIncreaseFundedAmount", EmitDefaultValue=false)]
        public double NewLoanIncreaseFundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the new loan&#39;s discount rate
        /// </summary>
        /// <value>Gets or sets the new loan&#39;s discount rate</value>
        [DataMember(Name="newLoanIncreaseDiscount", EmitDefaultValue=false)]
        public double NewLoanIncreaseDiscount { get; set; }

        /// <summary>
        /// Gets or sets the value of NewLoanIncreaseAmount accounted for by the Discount Amount
        /// </summary>
        /// <value>Gets or sets the value of NewLoanIncreaseAmount accounted for by the Discount Amount</value>
        [DataMember(Name="newLoanIncreaseDiscountAmount", EmitDefaultValue=false)]
        public double NewLoanIncreaseDiscountAmount { get; set; }

        /// <summary>
        /// Gets or sets the consolidated loan&#39;s Original Amount, the total amount due to be repaid on maturity
        /// </summary>
        /// <value>Gets or sets the consolidated loan&#39;s Original Amount, the total amount due to be repaid on maturity</value>
        [DataMember(Name="consolidatedLoanOriginalAmount", EmitDefaultValue=false)]
        public double ConsolidatedLoanOriginalAmount { get; set; }

        /// <summary>
        /// Gets or sets the consolidated loan&#39;s Funded Amount, the total amount loaned to the customer
        /// </summary>
        /// <value>Gets or sets the consolidated loan&#39;s Funded Amount, the total amount loaned to the customer</value>
        [DataMember(Name="consolidatedLoanFundedAmount", EmitDefaultValue=false)]
        public double ConsolidatedLoanFundedAmount { get; set; }

        /// <summary>
        /// Gets or sets the consolidated loan&#39;s discount rate
        /// </summary>
        /// <value>Gets or sets the consolidated loan&#39;s discount rate</value>
        [DataMember(Name="consolidatedLoanDiscount", EmitDefaultValue=false)]
        public double ConsolidatedLoanDiscount { get; set; }

        /// <summary>
        /// Gets or sets the discount fee associated with the consolidated loan
        /// </summary>
        /// <value>Gets or sets the discount fee associated with the consolidated loan</value>
        [DataMember(Name="consolidatedLoanDiscountAmount", EmitDefaultValue=false)]
        public double ConsolidatedLoanDiscountAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefinancingLoanDetailsModel {\n");
            sb.Append("  LoanId: ").Append(LoanId).Append("\n");
            sb.Append("  LoanNumber: ").Append(LoanNumber).Append("\n");
            sb.Append("  OldLoanOriginalAmount: ").Append(OldLoanOriginalAmount).Append("\n");
            sb.Append("  OldLoanFundedAmount: ").Append(OldLoanFundedAmount).Append("\n");
            sb.Append("  OldLoanDiscount: ").Append(OldLoanDiscount).Append("\n");
            sb.Append("  OldLoanDiscountAmount: ").Append(OldLoanDiscountAmount).Append("\n");
            sb.Append("  OldLoanRepaymentAmount: ").Append(OldLoanRepaymentAmount).Append("\n");
            sb.Append("  OldLoanRepaymentFundedAmount: ").Append(OldLoanRepaymentFundedAmount).Append("\n");
            sb.Append("  OldLoanRepaymentDiscountAmount: ").Append(OldLoanRepaymentDiscountAmount).Append("\n");
            sb.Append("  OldLoanUnpaidAmount: ").Append(OldLoanUnpaidAmount).Append("\n");
            sb.Append("  OldLoanUnpaidFundedAmount: ").Append(OldLoanUnpaidFundedAmount).Append("\n");
            sb.Append("  OldLoanUnpaidDiscountAmount: ").Append(OldLoanUnpaidDiscountAmount).Append("\n");
            sb.Append("  NewLoanIncreaseAmount: ").Append(NewLoanIncreaseAmount).Append("\n");
            sb.Append("  NewLoanIncreaseFundedAmount: ").Append(NewLoanIncreaseFundedAmount).Append("\n");
            sb.Append("  NewLoanIncreaseDiscount: ").Append(NewLoanIncreaseDiscount).Append("\n");
            sb.Append("  NewLoanIncreaseDiscountAmount: ").Append(NewLoanIncreaseDiscountAmount).Append("\n");
            sb.Append("  ConsolidatedLoanOriginalAmount: ").Append(ConsolidatedLoanOriginalAmount).Append("\n");
            sb.Append("  ConsolidatedLoanFundedAmount: ").Append(ConsolidatedLoanFundedAmount).Append("\n");
            sb.Append("  ConsolidatedLoanDiscount: ").Append(ConsolidatedLoanDiscount).Append("\n");
            sb.Append("  ConsolidatedLoanDiscountAmount: ").Append(ConsolidatedLoanDiscountAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefinancingLoanDetailsModel);
        }

        /// <summary>
        /// Returns true if RefinancingLoanDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RefinancingLoanDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefinancingLoanDetailsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoanId == input.LoanId ||
                    (this.LoanId != null &&
                    this.LoanId.Equals(input.LoanId))
                ) && 
                (
                    this.LoanNumber == input.LoanNumber ||
                    this.LoanNumber.Equals(input.LoanNumber)
                ) && 
                (
                    this.OldLoanOriginalAmount == input.OldLoanOriginalAmount ||
                    this.OldLoanOriginalAmount.Equals(input.OldLoanOriginalAmount)
                ) && 
                (
                    this.OldLoanFundedAmount == input.OldLoanFundedAmount ||
                    this.OldLoanFundedAmount.Equals(input.OldLoanFundedAmount)
                ) && 
                (
                    this.OldLoanDiscount == input.OldLoanDiscount ||
                    this.OldLoanDiscount.Equals(input.OldLoanDiscount)
                ) && 
                (
                    this.OldLoanDiscountAmount == input.OldLoanDiscountAmount ||
                    this.OldLoanDiscountAmount.Equals(input.OldLoanDiscountAmount)
                ) && 
                (
                    this.OldLoanRepaymentAmount == input.OldLoanRepaymentAmount ||
                    this.OldLoanRepaymentAmount.Equals(input.OldLoanRepaymentAmount)
                ) && 
                (
                    this.OldLoanRepaymentFundedAmount == input.OldLoanRepaymentFundedAmount ||
                    this.OldLoanRepaymentFundedAmount.Equals(input.OldLoanRepaymentFundedAmount)
                ) && 
                (
                    this.OldLoanRepaymentDiscountAmount == input.OldLoanRepaymentDiscountAmount ||
                    this.OldLoanRepaymentDiscountAmount.Equals(input.OldLoanRepaymentDiscountAmount)
                ) && 
                (
                    this.OldLoanUnpaidAmount == input.OldLoanUnpaidAmount ||
                    this.OldLoanUnpaidAmount.Equals(input.OldLoanUnpaidAmount)
                ) && 
                (
                    this.OldLoanUnpaidFundedAmount == input.OldLoanUnpaidFundedAmount ||
                    this.OldLoanUnpaidFundedAmount.Equals(input.OldLoanUnpaidFundedAmount)
                ) && 
                (
                    this.OldLoanUnpaidDiscountAmount == input.OldLoanUnpaidDiscountAmount ||
                    this.OldLoanUnpaidDiscountAmount.Equals(input.OldLoanUnpaidDiscountAmount)
                ) && 
                (
                    this.NewLoanIncreaseAmount == input.NewLoanIncreaseAmount ||
                    this.NewLoanIncreaseAmount.Equals(input.NewLoanIncreaseAmount)
                ) && 
                (
                    this.NewLoanIncreaseFundedAmount == input.NewLoanIncreaseFundedAmount ||
                    this.NewLoanIncreaseFundedAmount.Equals(input.NewLoanIncreaseFundedAmount)
                ) && 
                (
                    this.NewLoanIncreaseDiscount == input.NewLoanIncreaseDiscount ||
                    this.NewLoanIncreaseDiscount.Equals(input.NewLoanIncreaseDiscount)
                ) && 
                (
                    this.NewLoanIncreaseDiscountAmount == input.NewLoanIncreaseDiscountAmount ||
                    this.NewLoanIncreaseDiscountAmount.Equals(input.NewLoanIncreaseDiscountAmount)
                ) && 
                (
                    this.ConsolidatedLoanOriginalAmount == input.ConsolidatedLoanOriginalAmount ||
                    this.ConsolidatedLoanOriginalAmount.Equals(input.ConsolidatedLoanOriginalAmount)
                ) && 
                (
                    this.ConsolidatedLoanFundedAmount == input.ConsolidatedLoanFundedAmount ||
                    this.ConsolidatedLoanFundedAmount.Equals(input.ConsolidatedLoanFundedAmount)
                ) && 
                (
                    this.ConsolidatedLoanDiscount == input.ConsolidatedLoanDiscount ||
                    this.ConsolidatedLoanDiscount.Equals(input.ConsolidatedLoanDiscount)
                ) && 
                (
                    this.ConsolidatedLoanDiscountAmount == input.ConsolidatedLoanDiscountAmount ||
                    this.ConsolidatedLoanDiscountAmount.Equals(input.ConsolidatedLoanDiscountAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoanId != null)
                    hashCode = hashCode * 59 + this.LoanId.GetHashCode();
                hashCode = hashCode * 59 + this.LoanNumber.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanOriginalAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanFundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanDiscount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanDiscountAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanRepaymentAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanRepaymentFundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanRepaymentDiscountAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanUnpaidAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanUnpaidFundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.OldLoanUnpaidDiscountAmount.GetHashCode();
                hashCode = hashCode * 59 + this.NewLoanIncreaseAmount.GetHashCode();
                hashCode = hashCode * 59 + this.NewLoanIncreaseFundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.NewLoanIncreaseDiscount.GetHashCode();
                hashCode = hashCode * 59 + this.NewLoanIncreaseDiscountAmount.GetHashCode();
                hashCode = hashCode * 59 + this.ConsolidatedLoanOriginalAmount.GetHashCode();
                hashCode = hashCode * 59 + this.ConsolidatedLoanFundedAmount.GetHashCode();
                hashCode = hashCode * 59 + this.ConsolidatedLoanDiscount.GetHashCode();
                hashCode = hashCode * 59 + this.ConsolidatedLoanDiscountAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
