/* 
 * Third Party Loan API
 *
 * Through this API you can can retrieve loan data
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.Loan.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.Loan.Client.Model
{
    /// <summary>
    /// A model detailing the repayments made on a particular loan
    /// </summary>
    [DataContract]
    public partial class LoanRepaymentModel :  IEquatable<LoanRepaymentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoanRepaymentModel" /> class.
        /// </summary>
        /// <param name="transactionHistoryId">Gets or sets the Transaction History ID.</param>
        /// <param name="paymentDate">Gets or sets the Payment Date.</param>
        /// <param name="totalCardTransactions">Gets or sets the Total Card Transactions value.</param>
        /// <param name="sweep">Gets or sets the Sweep, a decimal out of 100 representing the proportion of transaction income which this repayment represents.</param>
        /// <param name="repaymentAmount">Gets or sets the Repayment Amount.</param>
        /// <param name="loanBalance">Gets or sets the Loan Balance.</param>
        /// <param name="payments">Gets or sets the record of Payments.</param>
        public LoanRepaymentModel(Guid transactionHistoryId = default(Guid), DateTime paymentDate = default(DateTime), double totalCardTransactions = default(double), double sweep = default(double), double repaymentAmount = default(double), double loanBalance = default(double), List<double> payments = default(List<double>))
        {
            this.TransactionHistoryId = transactionHistoryId;
            this.PaymentDate = paymentDate;
            this.TotalCardTransactions = totalCardTransactions;
            this.Sweep = sweep;
            this.RepaymentAmount = repaymentAmount;
            this.LoanBalance = loanBalance;
            this.Payments = payments;
        }
        
        /// <summary>
        /// Gets or sets the Transaction History ID
        /// </summary>
        /// <value>Gets or sets the Transaction History ID</value>
        [DataMember(Name="transactionHistoryId", EmitDefaultValue=false)]
        public Guid TransactionHistoryId { get; set; }

        /// <summary>
        /// Gets or sets the Payment Date
        /// </summary>
        /// <value>Gets or sets the Payment Date</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// Gets or sets the Total Card Transactions value
        /// </summary>
        /// <value>Gets or sets the Total Card Transactions value</value>
        [DataMember(Name="totalCardTransactions", EmitDefaultValue=false)]
        public double TotalCardTransactions { get; set; }

        /// <summary>
        /// Gets or sets the Sweep, a decimal out of 100 representing the proportion of transaction income which this repayment represents
        /// </summary>
        /// <value>Gets or sets the Sweep, a decimal out of 100 representing the proportion of transaction income which this repayment represents</value>
        [DataMember(Name="sweep", EmitDefaultValue=false)]
        public double Sweep { get; set; }

        /// <summary>
        /// Gets or sets the Repayment Amount
        /// </summary>
        /// <value>Gets or sets the Repayment Amount</value>
        [DataMember(Name="repaymentAmount", EmitDefaultValue=false)]
        public double RepaymentAmount { get; set; }

        /// <summary>
        /// Gets or sets the Loan Balance
        /// </summary>
        /// <value>Gets or sets the Loan Balance</value>
        [DataMember(Name="loanBalance", EmitDefaultValue=false)]
        public double LoanBalance { get; set; }

        /// <summary>
        /// Gets or sets the record of Payments
        /// </summary>
        /// <value>Gets or sets the record of Payments</value>
        [DataMember(Name="payments", EmitDefaultValue=false)]
        public List<double> Payments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoanRepaymentModel {\n");
            sb.Append("  TransactionHistoryId: ").Append(TransactionHistoryId).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  TotalCardTransactions: ").Append(TotalCardTransactions).Append("\n");
            sb.Append("  Sweep: ").Append(Sweep).Append("\n");
            sb.Append("  RepaymentAmount: ").Append(RepaymentAmount).Append("\n");
            sb.Append("  LoanBalance: ").Append(LoanBalance).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoanRepaymentModel);
        }

        /// <summary>
        /// Returns true if LoanRepaymentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LoanRepaymentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoanRepaymentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionHistoryId == input.TransactionHistoryId ||
                    (this.TransactionHistoryId != null &&
                    this.TransactionHistoryId.Equals(input.TransactionHistoryId))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.TotalCardTransactions == input.TotalCardTransactions ||
                    this.TotalCardTransactions.Equals(input.TotalCardTransactions)
                ) && 
                (
                    this.Sweep == input.Sweep ||
                    this.Sweep.Equals(input.Sweep)
                ) && 
                (
                    this.RepaymentAmount == input.RepaymentAmount ||
                    this.RepaymentAmount.Equals(input.RepaymentAmount)
                ) && 
                (
                    this.LoanBalance == input.LoanBalance ||
                    this.LoanBalance.Equals(input.LoanBalance)
                ) && 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionHistoryId != null)
                    hashCode = hashCode * 59 + this.TransactionHistoryId.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                hashCode = hashCode * 59 + this.TotalCardTransactions.GetHashCode();
                hashCode = hashCode * 59 + this.Sweep.GetHashCode();
                hashCode = hashCode * 59 + this.RepaymentAmount.GetHashCode();
                hashCode = hashCode * 59 + this.LoanBalance.GetHashCode();
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
